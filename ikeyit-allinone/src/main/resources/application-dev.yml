logging:
  level:
    com.ikeyit: debug
    org.springframework.security: debug

grpc:
  server:
    port: 9100
  client:
    access-service-grpc:
      address: 'dns:///localhost:9100'

spring:
  config:
    # Create your application.yml in the following folder to overwrite the properties
    import: "optional:file:${user.home}/ikeyit-config/ikeyit-allinone/"
  # Configure the database
  datasource:
    account:
      url: jdbc:postgresql://postgresql-server:5432/account?currentSchema=public&stringtype=unspecified
      username: ikeyit
      password: dev_pass
    classroom:
      url: jdbc:postgresql://postgresql-server:5432/classroom?currentSchema=public&stringtype=unspecified
      username: ikeyit
      password: dev_pass
    access:
      url: jdbc:postgresql://postgresql-server:5432/access?currentSchema=public&stringtype=unspecified
      username: ikeyit
      password: dev_pass
    access-global:
      url: jdbc:postgresql://postgresql-server:5432/access?currentSchema=public&stringtype=unspecified
      username: ikeyit
      password: dev_pass
    access-event-retry:
      url: jdbc:postgresql://postgresql-server:5432/access?currentSchema=public&stringtype=unspecified
      username: ikeyit
      password: dev_pass
  data:
    # Configure the redis server
    redis:
      host: redis-server
      port: 6379
  # Configure object storage service. e.g. amazon s3
  blobstore:
    account:
      region: us-east-2
      endpoint: https://s3.us-east-2.amazonaws.com
      accessKey: access key
      secretKey: secret key
      bucket: bucket name
      cdnUrl: your cdn url for s3 storage
  security:
    account:
      authsession:
        # The secret is used to sign the JWT of auth session
        secret: yourlonglonglonglonglonglonglonglonglonglonglongsecret
    oauth2:
      # Configure social login
      client:
        registration:
          google:
            client-id: your client id
            client-secret: your client secret
            scope: openid, email, profile
            redirect-uri: "{baseUrl}/auth/oauth2/code/{registrationId}"
        provider:
          google:
            issuer-uri: https://accounts.google.com
      # Configure the authorizationserver to enable SSO for the other systems
      authorizationserver:
        # replace with your JWK set file
        jwk-set-file: ${user.home}/ikeyit-config/ikeyit-allinone/jwks.json
        # Configure the clients. TODO Store the clients in database
        client:
          ikeyit-classroom-ios:
            registration:
              client-id: ikeyit-classroom-ios
              client-authentication-methods:
                - none
              authorization-grant-types:
                - authorization_code
                - refresh_token
              redirect-uris:
                - com.ikeyit.Classroom://oidc_callback
              post-logout-redirect-uris:
                - com.ikeyit.Classroom://oidc_logout_callback
              scopes:
                - openid
                - profile
                - email
                - roles
                - offline_access
            token:
              access-token-time-to-live: 1m
              refresh-token-time-to-live: 1d
              reuse-refresh-tokens: false
            require-authorization-consent: false
            require-proof-key: true
          ikeyit-classroom-web:
            registration:
              client-id: ikeyit-classroom-web
              client-authentication-methods:
                - none
              authorization-grant-types:
                - authorization_code
              redirect-uris:
                - https://classroom.dev.test:5174/oidc-callback
                - https://classroom.dev.test:5174/silent-renew.html
              post-logout-redirect-uris:
                - https://classroom.dev.test:5174/oidc-logout-callback
              scopes:
                - openid
                - profile
                - email
                - roles
            token:
              access-token-time-to-live: 5m
              refresh-token-time-to-live: 12h
              reuse-refresh-tokens: false
            require-authorization-consent: false
            require-proof-key: true
          ikeyit-todo-web:
            registration:
              client-id: ikeyit-todo-web
              client-authentication-methods:
                - none
              authorization-grant-types:
                - authorization_code
                - refresh_token
              redirect-uris:
                - https://todo.dev.test:5173/callback
              post-logout-redirect-uris:
                - https://todo.dev.test:5173/
              scopes:
                - openid
                - profile
                - email
                - roles
                - offline_access
            token:
              access-token-time-to-live: 60m
              refresh-token-time-to-live: 360m
              reuse-refresh-tokens: false
            require-authorization-consent: false
            require-proof-key: true
          ikeyit-whatisthis-ios:
            registration:
              client-id: ikeyit-whatisthis-ios
              client-authentication-methods:
                - none
              authorization-grant-types:
                - authorization_code
                - refresh_token
              redirect-uris:
                - com.ikeyit.WhatIsThis://oidc_callback
              post-logout-redirect-uris:
                - com.ikeyit.WhatIsThis://oidc_logout_callback
              scopes:
                - openid
                - profile
                - email
                - roles
                - offline_access
            token:
              access-token-time-to-live: 1m
              refresh-token-time-to-live: 1d
              reuse-refresh-tokens: false
            require-authorization-consent: false
            require-proof-key: true
          web-client:
            registration:
              client-id: web-client
              client-secret: "{noop}secret"
              client-authentication-methods:
                - client_secret_post
              authorization-grant-types:
                - authorization_code
                - refresh_token
              redirect-uris:
                - http://localhost:8081/auth/oauth2/code/account
                - http://localhost:6112/auth/oauth2/code/account
              post-logout-redirect-uris:
                - http://localhost:8081/login
                - http://localhost:6112/login
              scopes:
                - openid
                - profile
                - roles
            token:
              accessTokenTimeToLive: 5m
              refreshTokenTimeToLive: 360m
            require-authorization-consent: false
      resourceserver:
        jwt:
#          jwk-set-uri: real authorization server jwks endpoint
#          this is only for dev
          jwk-set-file: ${user.home}/ikeyit-config/ikeyit-allinone/jwks-public.json